version = 1

[install]
coreutils.pkg-path = "coreutils"
findutils.pkg-path = "findutils"
gnutar.pkg-path = "gnutar"
pandoc.pkg-path = "pandoc"
poetry.pkg-path = "poetry"
python.pkg-path = "python3"
python.version = "3.11.*"
pngquant.pkg-path = "pngquant"
gnused.pkg-path = "gnused"
d2.pkg-path = "d2"

lychee.pkg-path = "lychee"
lychee.pkg-group = "lint"
markdownlint-cli2.pkg-path = "markdownlint-cli2"
markdownlint-cli2.pkg-group = "lint"

[hook]
on-activate = '''

#
# Python environment activation and installation
#
export POETRY_VIRTUALENVS_PATH="$FLOX_ENV_CACHE/poetry/virtualenvs"
if [ -z "$(poetry env info --path)" ]; then
  poetry env use python &> /dev/null
fi
source "$(poetry env info --path)/bin/activate" &> /dev/null
poetry install --quiet &> /dev/null
echo "1. 👉 Python environment activated"

# 
# Set the version of Flox to the latest stable version
#
# export FLOX_VERSION=$(cat FLOX_VERSION | xargs)
export FLOX_VERSION=main
echo "2. 👉 FLOX_VERSION set to $FLOX_VERSION"

# 
# Copy and process Flox man pages
# 
export FLOX_SRC_ARCHIVE="$FLOX_ENV_CACHE/flox-main.tar.gz"
if [ ! -e "$FLOX_SRC_ARCHIVE" ]; then
  curl -sL "https://github.com/flox/flox/archive/refs/heads/main.tar.gz" -o $FLOX_SRC_ARCHIVE
fi
echo "3. 👉 Downloaded Flox source archive"

export FLOX_SRC_DIR="$FLOX_ENV_CACHE/flox-src-$FLOX_VERSION"
if [ ! -d "$FLOX_SRC_DIR" ]; then
  mkdir -p $FLOX_SRC_DIR
  tar -zx --strip-components=1 --file=$FLOX_SRC_ARCHIVE --directory=$FLOX_SRC_DIR;
fi
echo "4. 👉 Extracted Flox source archive"

export FLOX_MAN_PAGES_DIR="$PWD/docs/reference/command-reference"
if [ -d "$FLOX_MAN_PAGES_DIR" ]; then
  rm -rf "$FLOX_MAN_PAGES_DIR/*"
fi
mkdir -p $FLOX_MAN_PAGES_DIR
pushd "$FLOX_SRC_DIR/cli/flox/doc" > /dev/null
  find . -maxdepth 1 -iname "*.md" -exec \
    sh -c "
      pandoc -t gfm \
        -L $FLOX_SRC_DIR/pkgs/flox-manpages/pandoc-filters/include-files.lua \
        --standalone \
        {} |
        # remove current title
        tail -n +6 |
        # indent all markdown levels by one, e.g. "#" -> "##"
        sed -e 's/^#/##/' > \"$FLOX_MAN_PAGES_DIR/{}\"
    " \;
popd > /dev/null
pushd $FLOX_MAN_PAGES_DIR > /dev/null
  for commandPage in ./*.md; do
    # All other man page files have names of the form
    # 'flox*.md'
    if [ "$commandPage" = "./manifest.toml.md" ]; then
      continue
    fi
    command=$(basename $commandPage .md | sed -e "s|-| |g")
    echo -e "\n# \`$command\` command\n$(cat $commandPage)" > $commandPage
    echo -e "---\n$(cat $commandPage)" > $commandPage
    echo -e "description: Command reference for the \`$command\` command.\n$(cat $commandPage)" > $commandPage
    echo -e "title: $command\n$(cat $commandPage)" > $commandPage
    echo -e "---\n$(cat $commandPage)" > $commandPage
  done

  manifestPage="manifest.toml.md"
  echo -e "\n# \`manifest.toml\`\n$(cat $manifestPage)" > $manifestPage
  echo -e "---\n$(cat $manifestPage)" > $manifestPage
  echo -e "description: Reference for the manifest.toml format.\n$(cat $manifestPage)" > $manifestPage
  echo -e "title: manifest.toml\n$(cat $manifestPage)" > $manifestPage
  echo -e "---\n$(cat $manifestPage)" > $manifestPage
popd > /dev/null
echo "5. 👉 Copy man pages from Flox source archive"
'''

[profile]
common = '''
echo ""
echo "     ╔═══════════════════════════════════╗"
echo "     ║                                   ║"
echo "     ║  To build a production docs run:  ║"
echo "     ║  > mkdocs build                   ║"
echo "     ║                                   ║"
echo "     ║  To write docs locally run:       ║"
echo "     ║  > mkdocs serve                   ║"
echo "     ║                                   ║"
echo "     ╚═══════════════════════════════════╝"
echo ""
'''
bash = '''
  source "$(poetry env info --path)/bin/activate"
  alias lint=markdownlint-cli2
'''
fish = '''
  source "$(poetry env info --path)/bin/activate.fish"
  alias lint markdownlint-cli2
'''
tcsh = '''
  source "$(poetry env info --path)/bin/activate.csh"
'''
zsh = '''
  source "$(poetry env info --path)/bin/activate"
  alias lint=markdownlint-cli2
'''

[services]
mkdocs.command = "mkdocs serve"
mkdocs.is-daemon = false

[options]
cuda-detection = false
